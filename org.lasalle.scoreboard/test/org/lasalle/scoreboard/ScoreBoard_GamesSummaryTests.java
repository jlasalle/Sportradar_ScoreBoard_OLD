package org.lasalle.scoreboard;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.Test;

/**
 * Tests dedicated to the "Game summary" feature. Get a summary of games by
 * total score. Those games with the same total score will be returned ordered
 * by the most recently added to our system.
 * 
 * @author lasalle
 */
public class ScoreBoard_GamesSummaryTests {

	/**
	 * A_TEAM: one test team
	 */
	private static final String A_TEAM = "A_TEAM";
	/**
	 * B_TEAM: one test team
	 */
	private static final String B_TEAM = "B_TEAM";
	/**
	 * C_TEAM: one test team
	 */
	private static final String C_TEAM = "C_TEAM";
	/**
	 * D_TEAM: one test team
	 */
	private static final String D_TEAM = "D_TEAM";

	/**
	 * Default scores associated to new game
	 */
	private static final int DEFAULT_SCORE = 0;

	/**
	 * The tested ScoreBoard
	 */
	private ScoreBoard _scoreBoard = null;

	/**
	 * Initialization of the ScoreBoard
	 * 
	 * @throws Exception
	 */
	@Before
	public void setUp() throws Exception {
		_scoreBoard = new ScoreBoard();
	}

	/**
	 * Check that the "games summary" feature return the right String expression
	 */
	@Test
	public void gamesSummaryTest() {
		Game game = _scoreBoard.startGame(A_TEAM, B_TEAM);
		assertEquals(genSummaryLine(1, game), _scoreBoard.getGamesSummary());
	}

	/**
	 * Check that the "games summary" feature return the right String expression.
	 * Change order : 2 games, the second one having a higher total score (having
	 * then to be displayed first).
	 */
	@Test
	public void gamesSummaryTest_changeOrder() {
		// Configure the score Board like this :
		// A - B : 0 0
		// C - D : 1 0
		Game abGame = _scoreBoard.startGame(A_TEAM, B_TEAM);
		Game cdGame = _scoreBoard.startGame(C_TEAM, D_TEAM);
		cdGame.setHomeTeamScore(1);
		
		String result = genSummaryLine(1, cdGame) + genSummaryLine(2, abGame);
		assertEquals(result, _scoreBoard.getGamesSummary());
	}

	/**
	 * Generate a single summary line as it has to be generated by the ScoreBoard
	 * 
	 * @param num  line number
	 * @param game concerned game
	 * @return the excepted summary line
	 */
	private String genSummaryLine(int num, Game game) {
		return String.format("%s. %s %s - %s %s\n", num, game.getHomeTeamName(), game.getHomeTeamScore(),
				game.getAwayTeamName(), game.getAwayTeamScore());
	}
}
